<%- include('./partials/header.ejs') -%>


<div class="container mt-5">
    <div class="card">
        <div class="card-header">
            <h1 class="card-title">Welcome to the Admin Page</h1>
        </div>
        <form action="/" method="post" onsubmit="submitForm(); return false;">
            <div class="card-body">
                <!-- Stor boks med tekstboks -->
                <div class="mb-3">
                    <label for="textInput" class="form-label">Write something:</label>
                    <textarea class="form-control" id="textInput" name="textInput" rows="4"></textarea>
                </div>

                <!-- Mindre boks med bilde eller video -->
                <div class="mb-3">
                    <label for="imageInput" class="form-label">Upload Image or Video:</label>
                    <input type="text" class="form-control" id="imageInput" name="imageInput" placeholder="Paste image or video URL">
                </div>

                <button type="submit">Submit</button>
            </div>
        </form>
    </div>

    
    <h2>Data List</h2>
    <ul id="dataList">
    
    </ul>

</div>

<script>
    const dataList = document.getElementById('dataList');

new Sortable(dataList, {
  onUpdate: async (event) => {
    const currentOrder = Array.from(dataList.children).map((li, index) => {
      const itemId = li.dataset.itemId;
      return { _id: itemId, order: index + 1 };
    });

    try {
      const response = await fetch('/api/data/updateOrder', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ newOrder: currentOrder }),
      });

      if (response.ok) {
        console.log('Order updated successfully');
      } else {
        console.error('Error updating order on the server');
      }
    } catch (error) {
      console.error('Error occurred during the request:', error);
    }
  },
});

    //Henter data fra datbasen og rendrer den 
    document.addEventListener('DOMContentLoaded', async () => {
        await fetchDataAndRender();
    });

    async function  fetchDataAndRender() {
        try {
            const response = await fetch('/api/data');
            if (response.ok) {
                const data = await  response.json();
                renderDataList(data);
            }  else{
                console.error('Error fetching data')
            }

        } catch (error) {
            console.log('Error: error during this request ', error);
        }
    };

    function renderDataList(data) {
    const dataList = document.getElementById('dataList');
    dataList.innerHTML = '';

    // Set a fixed height for each box
    const fixedBoxHeight = 200; // Set your preferred height

    // Create a container with a custom class
    const container = document.createElement('div');
    container.classList.add('custom-container');

    data.forEach((item) => {
        const itemBox = document.createElement('div');
        itemBox.className = 'data-item-box';

        // Display text input
        const textParagraph = document.createElement('p');
        textParagraph.textContent = item.textInput;

        itemBox.appendChild(textParagraph);

        // Display image input only if there is a URL
        if (item.imageInput) {
            const imageContainer = document.createElement('div');
            imageContainer.className = 'image-container';

            const imageElement = document.createElement('img');
            imageElement.src = item.imageInput;
            imageElement.alt = 'Image';

            imageContainer.appendChild(imageElement);
            itemBox.appendChild(imageContainer);
        }

        // Create a delete button
        const deleteButton = document.createElement('button');
        deleteButton.textContent = 'Delete';
        deleteButton.className = 'delete-button';
        deleteButton.addEventListener('click', () => deleteItem(item._id));

        // Append the delete button to the itemBox
        itemBox.appendChild(deleteButton);

        // Set a fixed height for each box
        itemBox.style.height = fixedBoxHeight + 'px';

        // Append the itemBox to the container
        container.appendChild(itemBox);
    });

    // Append the container to the dataList
    dataList.appendChild(container);
}











    // Funksjon for Ã¥ slette data fra databasen
    async function deleteItem(itemId) {
        try {
            const response = await fetch(`/api/data/delete/${itemId}`, {
                method: 'DELETE',
            });

            if (response.ok) {
                alert('Data deleted successfully!');
                location.reload();
            } else {
                console.error('Error deleting data on the server');
            }
        } catch (error) {
            console.error('Error occurred during the request:', error);
        }
    };

    async function sortByField(field) {
    try {
        const response = await fetch(`/api/data/sort/${field}`);
        if (response.ok) {
        const data = await response.json();
        renderDataList(data);
        } else {
        console.error('Error fetching sorted data from the server');
        }
    } catch (error) {
        console.error('Error occurred during the request:', error);
    }
    }



    // Function to submit the form asynchronously
    async function submitForm() {
        const textInput = document.getElementById('textInput').value;
        const imageInput = document.getElementById('imageInput').value;

        // Make an AJAX request to the server
        try {
            const response = await fetch('/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ textInput, imageInput }),
            });

            if (response.ok) {
                // Show a success alert if the server responds with a successful status
                alert('Data sent successfully!');

                // Reload the page only if the user clicks OK on the alert
                location.reload();
            } else {
                console.error('Server responded with an error');
            }
        } catch (error) {
            console.error('Error occurred during the request:', error);
        }
    }
</script>

<%- include('partials/footer.ejs'); -%>
